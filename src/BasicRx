#include <iostream>
#include <RadioLib.h>
#include "PiHal.h"

// Create a new instance of the HAL class
PiHal* hal = new PiHal(0);

// Create the radio module instance
// NSS pin: WiringPi 10 (GPIO 8) WPI # 29 GPIO 21 for Pi hat
// DIO1 pin: WiringPi 2 (GPIO 27) WPI # 27 GPIO 16 for Pi hat
// NRST pin: WiringPi 21 (GPIO 5) WPI #1 GPIO 18
// BUSY pin: WiringPi 0 (GPIO 17) WPI #28 GPIO 20
Module* module = new Module(hal, 10, 2, 21, 0);
SX1262 radio(module);

int main() {
  // Initialize the radio module with XTAL configuration
  printf("[SX1262] Initializing ... ");
  int state = radio.beginFSK(915.0, 4.8, 125.0, 467.0, 20.0, 16.0, 0.0, false);
  if (state != RADIOLIB_ERR_NONE) {
    printf("Initialization failed, code %d\n", state);
    return 1;
  }
  printf("Initialization success!\n");
 
  // Start receiving packets
  printf("[SX1262] Starting receiver ... ");
  state = radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);
  if (state != RADIOLIB_ERR_NONE) {
    printf("Start receive failed, code %d\n", state);
    return 1;
  }
  printf("Receiver started!\n");

  // Main loop
  while (true) {
    // Check if a packet has been received
    //if (radio.getIrqStatus() & RADIOLIB_SX126X_IRQ_RX_DONE) {
      // Read the received packet
      uint8_t data[64];
      size_t len = sizeof(data);
      state = radio.readData(data, len);
      if (state == RADIOLIB_ERR_NONE) {
        // Successfully read the data
        printf("Received: %s\n", data);
        hal->delay(1000);

        // Get and print the RSSI for the last received packet
        float rssi = radio.getRSSI();
        printf("RSSI: %.2f dBm\n", rssi);
      } else {
        printf("Read data failed, code %d\n", state);
      }

      // Restart the receiver
      state = radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);
      if (state != RADIOLIB_ERR_NONE) {
        printf("Restart receive failed, code %d\n", state);
        return 1;
      }
    //}

    // Small delay to avoid busy waiting
    hal->delay(100);
  }

  return 0;
}
